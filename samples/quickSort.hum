quickSort = (unsorted List(of T)) List(of T)
    { An efficient, but unstable, in-place sorting algorithm.
      T must be a comparable type. }

    partition = private (list List(of T), low Int, high Int) -> Int
        { Helper for quickSort. This function takes the last element as pivot,
        places the pivot element at its correct position in the sorted
        array, and places all smaller elements to the left of the pivot
        and all greater elements to the right. }

        pivot = list[high]
        i = low - 1 { Index of smaller element }

        for j in low:high-1
            if list[j] <= pivot
                i = i + 1
                list[i], list[j] = list[j], list[i]

        list[i+1], list[high] = list[high], list[i+1]
        return i + 1

    quickSortRecursive = private (list List(of T), low Int, high Int)
        { The main recursive function that implements QuickSort. }
        if low < high
            pi = partition(list, low, high) { pi is partitioning index }

            quickSortRecursive(list, low, pi - 1)
            quickSortRecursive(list, pi + 1, high)


    sortedList = unsorted.copy()
    quickSortRecursive(sortedList, 0, sortedList.length - 1)
    sortedList

quickSort_parallel = (unsorted List[T]) -> List[T]
    { The public-facing function for a highly efficient, parallel,
      in-place Quick Sort. T must be a comparable type. }

    partition = (span Span[T]) -> Int
        { This function takes a Span, partitions it in-place using the
        last element as the pivot, and returns the pivot's final index
        relative to the start of the Span. }

        n = span.length
        if n <= 1 return 0

        pivot = span[n - 1]
        i = -1 { Index of the smaller element's boundary }

        for j in 0:n-2
            if span[j] <= pivot
                i = i + 1
                span[i], span[j] = span[j], span[i]

        [ Place pivot in its final correct position ]
        span[i+1], span[n-1] = span[n-1], span[i+1]
        i + 1

    quickSort_span = (span Span[T])
        { The main recursive function that implements QuickSort on a Span. }

        if span.length <= 1 return

        { Similar to Merge Sort, we add a threshold. For small sub-lists,
        the overhead of parallelism isn't worth it. }
        if span.length < 2000
            pi = partition_span(span)
            quickSort_span(span[0:pi])
            quickSort_span(span[pi+1:])
        else
            { Partitioning must happen sequentially first }
            pi = partition_span(span)

            { Now we have two independent sub-problems on disjoint spans.
            We can solve them in parallel. }
            parallel
                quickSort_span(span[0:pi])
                quickSort_span(span[pi+1:])


    
    sortedList = unsorted.copy()
    initialSpan = sortedList[0:] { Create a span covering the entire list }

    quickSortOnSpan(initialSpan)

    return sortedList
    